{"ast":null,"code":"\"use strict\";\n\nvar WeakMap = require(\"weak-map\");\n\nvar List = require(\"../list\");\n\nmodule.exports = MapChanges;\n\nfunction MapChanges() {\n  throw new Error(\"Can't construct. MapChanges is a mixin.\");\n}\n\nvar object_owns = Object.prototype.hasOwnProperty;\n/*\n    Object map change descriptors carry information necessary for adding,\n    removing, dispatching, and shorting events to listeners for map changes\n    for a particular key on a particular object.  These descriptors are used\n    here for shallow map changes.\n\n    {\n        willChangeListeners:Array(Function)\n        changeListeners:Array(Function)\n    }\n*/\n\nvar mapChangeDescriptors = new WeakMap();\nvar Dict = null;\n\nMapChanges.prototype.getAllMapChangeDescriptors = function () {\n  if (!mapChangeDescriptors.has(this)) {\n    if (!Dict) {\n      Dict = require(\"../dict\");\n    }\n\n    mapChangeDescriptors.set(this, Dict());\n  }\n\n  return mapChangeDescriptors.get(this);\n};\n\nMapChanges.prototype.getMapChangeDescriptor = function (token) {\n  var tokenChangeDescriptors = this.getAllMapChangeDescriptors();\n  token = token || \"\";\n\n  if (!tokenChangeDescriptors.has(token)) {\n    tokenChangeDescriptors.set(token, {\n      willChangeListeners: new List(),\n      changeListeners: new List()\n    });\n  }\n\n  return tokenChangeDescriptors.get(token);\n};\n\nMapChanges.prototype.addMapChangeListener = function (listener, token, beforeChange) {\n  if (!this.isObservable && this.makeObservable) {\n    // for Array\n    this.makeObservable();\n  }\n\n  var descriptor = this.getMapChangeDescriptor(token);\n  var listeners;\n\n  if (beforeChange) {\n    listeners = descriptor.willChangeListeners;\n  } else {\n    listeners = descriptor.changeListeners;\n  }\n\n  listeners.push(listener);\n  Object.defineProperty(this, \"dispatchesMapChanges\", {\n    value: true,\n    writable: true,\n    configurable: true,\n    enumerable: false\n  });\n  var self = this;\n  return function cancelMapChangeListener() {\n    if (!self) {\n      // TODO throw new Error(\"Can't remove map change listener again\");\n      return;\n    }\n\n    self.removeMapChangeListener(listener, token, beforeChange);\n    self = null;\n  };\n};\n\nMapChanges.prototype.removeMapChangeListener = function (listener, token, beforeChange) {\n  var descriptor = this.getMapChangeDescriptor(token);\n  var listeners;\n\n  if (beforeChange) {\n    listeners = descriptor.willChangeListeners;\n  } else {\n    listeners = descriptor.changeListeners;\n  }\n\n  var node = listeners.findLast(listener);\n\n  if (!node) {\n    throw new Error(\"Can't remove map change listener: does not exist: token \" + JSON.stringify(token));\n  }\n\n  node[\"delete\"]();\n};\n\nMapChanges.prototype.dispatchMapChange = function (key, value, beforeChange) {\n  var descriptors = this.getAllMapChangeDescriptors();\n  var changeName = \"Map\" + (beforeChange ? \"WillChange\" : \"Change\");\n  descriptors.forEach(function (descriptor, token) {\n    if (descriptor.isActive) {\n      return;\n    } else {\n      descriptor.isActive = true;\n    }\n\n    var listeners;\n\n    if (beforeChange) {\n      listeners = descriptor.willChangeListeners;\n    } else {\n      listeners = descriptor.changeListeners;\n    }\n\n    var tokenName = \"handle\" + (token.slice(0, 1).toUpperCase() + token.slice(1)) + changeName;\n\n    try {\n      // dispatch to each listener\n      listeners.forEach(function (listener) {\n        if (listener[tokenName]) {\n          listener[tokenName](value, key, this);\n        } else if (listener.call) {\n          listener.call(listener, value, key, this);\n        } else {\n          throw new Error(\"Handler \" + listener + \" has no method \" + tokenName + \" and is not callable\");\n        }\n      }, this);\n    } finally {\n      descriptor.isActive = false;\n    }\n  }, this);\n};\n\nMapChanges.prototype.addBeforeMapChangeListener = function (listener, token) {\n  return this.addMapChangeListener(listener, token, true);\n};\n\nMapChanges.prototype.removeBeforeMapChangeListener = function (listener, token) {\n  return this.removeMapChangeListener(listener, token, true);\n};\n\nMapChanges.prototype.dispatchBeforeMapChange = function (key, value) {\n  return this.dispatchMapChange(key, value, true);\n};","map":null,"metadata":{},"sourceType":"script"}