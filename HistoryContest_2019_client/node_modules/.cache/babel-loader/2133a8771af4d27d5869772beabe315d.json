{"ast":null,"code":"var sheetFront = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><x:worksheet xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:x=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">' + ' <x:sheetPr/><x:sheetViews><x:sheetView tabSelected=\"1\" workbookViewId=\"0\" /></x:sheetViews>' + ' <x:sheetFormatPr defaultRowHeight=\"15\" />';\nvar sheetBack = ' <x:pageMargins left=\"0.75\" right=\"0.75\" top=\"0.75\" bottom=\"0.5\" header=\"0.5\" footer=\"0.75\" />' + ' <x:headerFooter /></x:worksheet>';\n\nvar fs = require('fs');\n\nfunction Sheet(config, xlsx, shareStrings, convertedShareStrings) {\n  this.config = config;\n  this.xlsx = xlsx;\n  this.shareStrings = shareStrings;\n  this.convertedShareStrings = convertedShareStrings;\n}\n\nSheet.prototype.generate = function () {\n  var config = this.config,\n      xlsx = this.xlsx;\n  var cols = config.cols,\n      data = config.rows,\n      colsLength = cols.length,\n      rows = \"\",\n      row = \"\",\n      colsWidth = \"\",\n      styleIndex,\n      self = this,\n      k;\n  config.fileName = 'xl/worksheets/' + (config.name || \"sheet\").replace(/[*?\\]\\[\\/\\/]/g, '') + '.xml';\n\n  if (config.stylesXmlFile) {\n    var path = config.stylesXmlFile;\n    var styles = null;\n    styles = fs.readFileSync(path, 'utf8');\n\n    if (styles) {\n      xlsx.file(\"xl/styles.xml\", styles);\n    }\n  } //first row for column caption\n\n\n  row = '<x:row r=\"1\" spans=\"1:' + colsLength + '\">';\n  var colStyleIndex;\n\n  for (k = 0; k < colsLength; k++) {\n    colStyleIndex = cols[k].captionStyleIndex || 0;\n    row += addStringCell(self, getColumnLetter(k + 1) + 1, cols[k].caption, colStyleIndex);\n\n    if (cols[k].width) {\n      colsWidth += '<col customWidth = \"1\" width=\"' + cols[k].width + '\" max = \"' + (k + 1) + '\" min=\"' + (k + 1) + '\"/>';\n    }\n  }\n\n  row += '</x:row>';\n  rows += row; //fill in data\n\n  var i,\n      j,\n      r,\n      cellData,\n      currRow,\n      cellType,\n      dataLength = data.length;\n\n  for (i = 0; i < dataLength; i++) {\n    r = data[i], currRow = i + 2;\n    row = '<x:row r=\"' + currRow + '\" spans=\"1:' + colsLength + '\">';\n\n    for (j = 0; j < colsLength; j++) {\n      styleIndex = null;\n      cellData = r[j];\n      cellType = cols[j].type;\n\n      if (typeof cols[j].beforeCellWrite === 'function') {\n        var e = {\n          rowNum: currRow,\n          styleIndex: null,\n          cellType: cellType\n        };\n        cellData = cols[j].beforeCellWrite(r, cellData, e);\n        styleIndex = e.styleIndex || styleIndex;\n        cellType = e.cellType;\n        delete e;\n      }\n\n      switch (cellType) {\n        case 'number':\n          row += addNumberCell(getColumnLetter(j + 1) + currRow, cellData, styleIndex);\n          break;\n\n        case 'date':\n          row += addDateCell(getColumnLetter(j + 1) + currRow, cellData, styleIndex);\n          break;\n\n        case 'bool':\n          row += addBoolCell(getColumnLetter(j + 1) + currRow, cellData, styleIndex);\n          break;\n\n        default:\n          row += addStringCell(self, getColumnLetter(j + 1) + currRow, cellData, styleIndex);\n      }\n    }\n\n    row += '</x:row>';\n    rows += row;\n  }\n\n  if (colsWidth !== \"\") {\n    sheetFront += '<cols>' + colsWidth + '</cols>';\n  }\n\n  xlsx.file(config.fileName, sheetFront + '<x:sheetData>' + rows + '</x:sheetData>' + sheetBack);\n};\n\nmodule.exports = Sheet;\n\nvar startTag = function (obj, tagName, closed) {\n  var result = \"<\" + tagName,\n      p;\n\n  for (p in obj) {\n    result += \" \" + p + \"=\" + obj[p];\n  }\n\n  if (!closed) result += \">\";else result += \"/>\";\n  return result;\n};\n\nvar endTag = function (tagName) {\n  return \"</\" + tagName + \">\";\n};\n\nvar addNumberCell = function (cellRef, value, styleIndex) {\n  styleIndex = styleIndex || 0;\n  if (value === null) return \"\";else return '<x:c r=\"' + cellRef + '\" s=\"' + styleIndex + '\" t=\"n\"><x:v>' + value + '</x:v></x:c>';\n};\n\nvar addDateCell = function (cellRef, value, styleIndex) {\n  styleIndex = styleIndex || 1;\n  if (value === null) return \"\";else return '<x:c r=\"' + cellRef + '\" s=\"' + styleIndex + '\" t=\"n\"><x:v>' + value + '</x:v></x:c>';\n};\n\nvar addBoolCell = function (cellRef, value, styleIndex) {\n  styleIndex = styleIndex || 0;\n  if (value === null) return \"\";\n\n  if (value) {\n    value = 1;\n  } else value = 0;\n\n  return '<x:c r=\"' + cellRef + '\" s=\"' + styleIndex + '\" t=\"b\"><x:v>' + value + '</x:v></x:c>';\n};\n\nvar addStringCell = function (sheet, cellRef, value, styleIndex) {\n  styleIndex = styleIndex || 0;\n  if (value === null) return \"\";\n\n  if (typeof value === 'string') {\n    value = value.replace(/&/g, \"&amp;\").replace(/'/g, \"&apos;\").replace(/>/g, \"&gt;\").replace(/</g, \"&lt;\");\n  }\n\n  var i = sheet.shareStrings.get(value, -1);\n\n  if (i < 0) {\n    i = sheet.shareStrings.length;\n    sheet.shareStrings.add(value, i);\n    sheet.convertedShareStrings += \"<x:si><x:t>\" + value + \"</x:t></x:si>\";\n  }\n\n  return '<x:c r=\"' + cellRef + '\" s=\"' + styleIndex + '\" t=\"s\"><x:v>' + i + '</x:v></x:c>';\n};\n\nvar getColumnLetter = function (col) {\n  if (col <= 0) throw \"col must be more than 0\";\n  var array = new Array();\n\n  while (col > 0) {\n    var remainder = col % 26;\n    col /= 26;\n    col = Math.floor(col);\n\n    if (remainder === 0) {\n      remainder = 26;\n      col--;\n    }\n\n    array.push(64 + remainder);\n  }\n\n  return String.fromCharCode.apply(null, array.reverse());\n};","map":null,"metadata":{},"sourceType":"script"}