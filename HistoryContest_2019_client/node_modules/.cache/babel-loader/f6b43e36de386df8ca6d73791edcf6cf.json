{"ast":null,"code":"\"use strict\";\n\nvar Shim = require(\"./shim\");\n\nvar SortedSet = require(\"./sorted-set\");\n\nvar GenericCollection = require(\"./generic-collection\");\n\nvar GenericMap = require(\"./generic-map\");\n\nvar PropertyChanges = require(\"./listen/property-changes\");\n\nmodule.exports = SortedMap;\n\nfunction SortedMap(values, equals, compare, getDefault) {\n  if (!(this instanceof SortedMap)) {\n    return new SortedMap(values, equals, compare, getDefault);\n  }\n\n  equals = equals || Object.equals;\n  compare = compare || Object.compare;\n  getDefault = getDefault || Function.noop;\n  this.contentEquals = equals;\n  this.contentCompare = compare;\n  this.getDefault = getDefault;\n  this.store = new SortedSet(null, function keysEqual(a, b) {\n    return equals(a.key, b.key);\n  }, function compareKeys(a, b) {\n    return compare(a.key, b.key);\n  });\n  this.length = 0;\n  this.addEach(values);\n} // hack so require(\"sorted-map\").SortedMap will work in MontageJS\n\n\nSortedMap.SortedMap = SortedMap;\nObject.addEach(SortedMap.prototype, GenericCollection.prototype);\nObject.addEach(SortedMap.prototype, GenericMap.prototype);\nObject.addEach(SortedMap.prototype, PropertyChanges.prototype);\n\nSortedMap.prototype.constructClone = function (values) {\n  return new this.constructor(values, this.contentEquals, this.contentCompare, this.getDefault);\n};\n\nSortedMap.prototype.log = function (charmap, logNode, callback, thisp) {\n  logNode = logNode || this.logNode;\n  this.store.log(charmap, function (node, log, logBefore) {\n    logNode(node.value, log, logBefore);\n  }, callback, thisp);\n};\n\nSortedMap.prototype.logNode = function (node, log) {\n  log(\" key: \" + node.key);\n  log(\" value: \" + node.value);\n};","map":null,"metadata":{},"sourceType":"script"}