{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isCellDescriptor = exports.isObject = exports.isString = exports.isNumber = exports.isBoolean = exports.buildSheetFromMatrix = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _xlsx = require('xlsx');\n\nvar _xlsx2 = _interopRequireDefault(_xlsx);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isBoolean = function isBoolean(maybeBoolean) {\n  return typeof maybeBoolean === 'boolean';\n};\n\nvar isNumber = function isNumber(maybeNumber) {\n  return typeof maybeNumber === 'number';\n};\n\nvar isString = function isString(maybeString) {\n  return typeof maybeString === 'string';\n};\n\nvar isObject = function isObject(maybeObject) {\n  return maybeObject !== null && (typeof maybeObject === 'undefined' ? 'undefined' : _typeof(maybeObject)) === 'object';\n};\n\nvar isCellDescriptor = function isCellDescriptor(maybeCell) {\n  return isObject(maybeCell) && 'v' in maybeCell;\n};\n\nvar originDate = new Date(Date.UTC(1899, 11, 30));\n\nvar buildExcelDate = function buildExcelDate(value, is1904) {\n  var epoch = Date.parse(value + (is1904 ? 1462 : 0));\n  return (epoch - originDate) / 864e5;\n};\n\nvar buildSheetFromMatrix = function buildSheetFromMatrix(data) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var workSheet = {};\n  var range = {\n    s: {\n      c: 1e7,\n      r: 1e7\n    },\n    e: {\n      c: 0,\n      r: 0\n    }\n  };\n  if (!Array.isArray(data)) throw new Error('sheet data is not array');\n\n  for (var R = 0; R !== data.length; R += 1) {\n    for (var C = 0; C !== data[R].length; C += 1) {\n      if (!Array.isArray(data[R])) throw new Error(R + 'th row data is not array');\n      if (range.s.r > R) range.s.r = R;\n      if (range.s.c > C) range.s.c = C;\n      if (range.e.r < R) range.e.r = R;\n      if (range.e.c < C) range.e.c = C;\n\n      if (data[R][C] === null) {\n        continue; // eslint-disable-line\n      }\n\n      var cell = isCellDescriptor(data[R][C]) ? data[R][C] : {\n        v: data[R][C]\n      };\n\n      var cellRef = _xlsx2.default.utils.encode_cell({\n        c: C,\n        r: R\n      });\n\n      if (isNumber(cell.v)) {\n        cell.t = 'n';\n      } else if (isBoolean(cell.v)) {\n        cell.t = 'b';\n      } else if (cell.v instanceof Date) {\n        cell.t = 'n';\n        cell.v = buildExcelDate(cell.v);\n        cell.z = cell.z || _xlsx2.default.SSF._table[14]; // eslint-disable-line no-underscore-dangle\n\n        /* eslint-disable spaced-comment, no-trailing-spaces */\n\n        /***\n         * Allows for an non-abstracted representation of the data\n         * \n         * example: {t:'n', z:10, f:'=AVERAGE(A:A)'}\n         * \n         * Documentation:\n         * - Cell Object: https://sheetjs.gitbooks.io/docs/#cell-object\n         * - Data Types: https://sheetjs.gitbooks.io/docs/#data-types\n         * - Format: https://sheetjs.gitbooks.io/docs/#number-formats\n         **/\n\n        /* eslint-disable spaced-comment, no-trailing-spaces */\n      } else if (isObject(cell.v)) {\n        cell.t = cell.v.t;\n        cell.f = cell.v.f;\n        cell.z = cell.v.z;\n      } else {\n        cell.t = 's';\n      }\n\n      if (isNumber(cell.z)) cell.z = _xlsx2.default.SSF._table[cell.z]; // eslint-disable-line no-underscore-dangle\n\n      workSheet[cellRef] = cell;\n    }\n  }\n\n  if (range.s.c < 1e7) {\n    workSheet['!ref'] = _xlsx2.default.utils.encode_range(range);\n  }\n\n  if (options['!cols']) {\n    workSheet['!cols'] = options['!cols'];\n  }\n\n  if (options['!merges']) {\n    workSheet['!merges'] = options['!merges'];\n  }\n\n  return workSheet;\n};\n\nexports.buildSheetFromMatrix = buildSheetFromMatrix;\nexports.isBoolean = isBoolean;\nexports.isNumber = isNumber;\nexports.isString = isString;\nexports.isObject = isObject;\nexports.isCellDescriptor = isCellDescriptor;","map":null,"metadata":{},"sourceType":"script"}