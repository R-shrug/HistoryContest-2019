{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Welcome","React","lazy","Promise","all","__webpack_require__","e","then","bind","Test","Grades","Admin","Super","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isWelcome","isLogin","isStudent","isAllDone","isAdmin","isTeacher","host","name","username","depart","departId","token","access","score","answer","appState","assertThisInitialized","logout","obj","setState","react_default","a","createElement","Fragment","id","react","fallback","style","width","height","backgroundColor","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.080cc3f1.chunk.js","sourcesContent":["import React,{Suspense} from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport {Result} from 'antd'\r\nconst Welcome = React.lazy(() => import('./Components/Welcome/Welcome'));\r\nconst Test = React.lazy(() => import('./Components/Test/Test'));\r\nconst Grades = React.lazy(() => import('./Components/Grades/Grades'));\r\nconst Admin = React.lazy(() => import('./Components/admin/admin'));\r\nconst Super = React.lazy(() => import('./Components/admin/superAdmin'));\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isWelcome: true,\r\n      isLogin: false,\r\n      isStudent: false,\r\n      isAllDone: false,\r\n      isAdmin: false,\r\n      isTeacher: false,\r\n      host: \"localhost:6553\",\r\n        name: 'zzz',\r\n        username: \"\",\r\n        depart: \"计算机科学与技术\",\r\n        departId: \"09\",\r\n        token: '',\r\n        access: -1,\r\n        score: -1,\r\n  \r\n      answer: [],\r\n    }\r\n    this.appState = this.appState.bind(this);\r\n    this.logout = this.logout.bind(this);\r\n  }\r\n  appState(obj) {\r\n    this.setState(obj);\r\n  }\r\n  logout() {\r\n    this.setState({\r\n      isWelcome: true,\r\n      isLogin: false,\r\n      isStudent: false,\r\n      isAllDone: false,\r\n      isAdmin: false,\r\n      isTeacher: false,\r\n        name: '',\r\n        username: \"\",\r\n        token: '',\r\n        access: -1,\r\n        score: -1,\r\n      answer: []\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div id=\"index\">\r\n          <Suspense fallback={<div style={{width:\"100%\",height:\"100%\",backgroundColor:\"black\"}}></div>}>\r\n            {this.state.isWelcome ? <Welcome state={this.state} setState={this.appState} /> : <div />}\r\n            {this.state.isStudent && this.state.score == -1 ? <Test state={this.state} setState={this.appState} logout={this.logout} /> : <div />}\r\n            {this.state.isTeacher ? <Admin state={this.state} setState={this.appState} logout={this.logout} /> : <div />}\r\n            {this.state.isAdmin ? <Super state={this.state} setState={this.appState} logout={this.logout} /> : <div />}\r\n            {this.state.score >= 0 ? <Grades state={this.state} setState={this.appState} logout={this.logout} /> : <div />}\r\n          </Suspense>\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'react-app-polyfill/ie11';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}